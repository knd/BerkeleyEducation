(dp0
S'245a027ef009a4c263f112ee0ed7c57b1fb3e4aa'
p1
(dp2
Voutput
p3
VNo disambiguation information for input segment: 'h e l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000a
p4
sVvalue
p5
Vimport util\u000a\u000aclass ValueNode:\u000a    def __init__(self):\u000a        self.val = None\u000adef sdt():\u000a    acc = ValueNode()\u000a    stack = []\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '('\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '('\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'h'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f947(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f947(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'l'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f947(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f947(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'l'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f947(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f947(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'o'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f947(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f947(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '|'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'w'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'o'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f947(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f947(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'r'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f947(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f947(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'l'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f947(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f947(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'd'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f946(n0,n1,n2): return ('<span class="%(id)s">%(expr)s</span><span class="%(qid)s">*</span><script>$(".%(qid)s").hover(function() { $(".%(id)s").css("background", "cyan"); }, function(){$(".%(id)s").css("background", "");}); </script>') % {'id': util.uniqueIdentifier(), 'qid': util.uniqueIdentifier(), 'expr': n1.val} \u000a    acc.val = f946(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f947(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f947(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f948(n0,n1,n2,n3): return '<span class="%(id)s">%(left)s</span><span class="%(aid)s">|</span><span class="%(id)s">%(right)s</span><script>$(".%(aid)s").hover(function() { $(".%(id)s").css("background", "yellow"); }, function() { $(".%(id)s").css("background", ""); });</script>' % {'id': util.uniqueIdentifier(), 'aid': util.uniqueIdentifier(), 'left': n1.val, 'right': n3.val} \u000a    acc.val = f948(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = ')'\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f949(n0,n1,n2,n3): return '<span class="%(gid)s">(</span>%(expr)s<span class="%(gid)s">)</span><script>$(".%(gid)s").hover(function() { $(".%(gid)s").css("background", "lightgreen"); }, function() { $(".%(gid)s").css("background", ""); });</script>' % {'gid': util.uniqueIdentifier(), 'expr': n2.val} \u000a    acc.val = f949(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'r'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f947(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f947(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f947(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f947(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'g'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f947(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f947(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f947(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f947(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'x'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f947(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f947(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '|'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '('\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 't'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f947(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f947(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 's'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f947(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f947(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 't'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f947(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f947(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = ')'\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f949(n0,n1,n2,n3): return '<span class="%(gid)s">(</span>%(expr)s<span class="%(gid)s">)</span><script>$(".%(gid)s").hover(function() { $(".%(gid)s").css("background", "lightgreen"); }, function() { $(".%(gid)s").css("background", ""); });</script>' % {'gid': util.uniqueIdentifier(), 'expr': n2.val} \u000a    acc.val = f949(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f946(n0,n1,n2): return ('<span class="%(id)s">%(expr)s</span><span class="%(qid)s">*</span><script>$(".%(qid)s").hover(function() { $(".%(id)s").css("background", "cyan"); }, function(){$(".%(id)s").css("background", "");}); </script>') % {'id': util.uniqueIdentifier(), 'qid': util.uniqueIdentifier(), 'expr': n1.val} \u000a    acc.val = f946(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f946(n0,n1,n2): return ('<span class="%(id)s">%(expr)s</span><span class="%(qid)s">*</span><script>$(".%(qid)s").hover(function() { $(".%(id)s").css("background", "cyan"); }, function(){$(".%(id)s").css("background", "");}); </script>') % {'id': util.uniqueIdentifier(), 'qid': util.uniqueIdentifier(), 'expr': n1.val} \u000a    acc.val = f946(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f948(n0,n1,n2,n3): return '<span class="%(id)s">%(left)s</span><span class="%(aid)s">|</span><span class="%(id)s">%(right)s</span><script>$(".%(aid)s").hover(function() { $(".%(id)s").css("background", "yellow"); }, function() { $(".%(id)s").css("background", ""); });</script>' % {'id': util.uniqueIdentifier(), 'aid': util.uniqueIdentifier(), 'left': n1.val, 'right': n3.val} \u000a    acc.val = f948(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = ')'\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f949(n0,n1,n2,n3): return '<span class="%(gid)s">(</span>%(expr)s<span class="%(gid)s">)</span><script>$(".%(gid)s").hover(function() { $(".%(gid)s").css("background", "lightgreen"); }, function() { $(".%(gid)s").css("background", ""); });</script>' % {'gid': util.uniqueIdentifier(), 'expr': n2.val} \u000a    acc.val = f949(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f946(n0,n1,n2): return ('<span class="%(id)s">%(expr)s</span><span class="%(qid)s">*</span><script>$(".%(qid)s").hover(function() { $(".%(id)s").css("background", "cyan"); }, function(){$(".%(id)s").css("background", "");}); </script>') % {'id': util.uniqueIdentifier(), 'qid': util.uniqueIdentifier(), 'expr': n1.val} \u000a    acc.val = f946(acc, *children[0:2])\u000a    return acc.val\u000aresult = sdt()\u000a
p6
ssS'c19e761e2dfe3a2eae79e5f35b9bab552e775e6f'
p7
(dp8
Voutput
p9
VNo disambiguation information for input segment: 'h e l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000a
p10
sVvalue
p11
Vimport util\u000a\u000aclass ValueNode:\u000a    def __init__(self):\u000a        self.val = None\u000adef sdt():\u000a    acc = ValueNode()\u000a    stack = []\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '('\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '('\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'h'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1455(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1455(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'l'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1455(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1455(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'l'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1455(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1455(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'o'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1455(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1455(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '|'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'w'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'o'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1455(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1455(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'r'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1455(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1455(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'l'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1455(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1455(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'd'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1454(n0,n1,n2): subStrId = util.uniqueIdentifier(); starId = util.uniqueIdentifier(); return '<span class="%(Rid)s">%(Rval)s</span><span class="%(id)s">*</span><script>$(".%(id)s").hover(function() {$(".%(Rid)s").css("background", "cyan");},function() {$(".%(Rid)s").css("background", "");});</script>' % { "Rid": subStrId, "id": starId, "Rval": n1.val } \u000a    acc.val = f1454(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1455(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1455(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1456(n0,n1,n2,n3): sideId = util.uniqueIdentifier(); barId = util.uniqueIdentifier(); return '<span class="%(sideId)s">n1.val</span><span class="%(id)s">|</span><span class="%(sideId)s">n3.val</span><script>$(".%(id)s").hover(function() {$(".%(sideId)s").css("background", "yellow");},function() {$(".%(sideId)s").css("background", "");});</script>' % { "sideId": sideId, "id": barId } \u000a    acc.val = f1456(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = ')'\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1457(n0,n1,n2,n3): id = util.uniqueIdentifier(); Rid = util.uniqueIdentifier(); return '<span class="%(id)s">(</span><span class="%(Rid)s">n2.val</span><span class="%(id)s">)</span><script>$(".%(id)s").hover(function() {$(".%(id)s").css("background", "lightgreen");},function() {$(".%(id)s").css("background", "");});</script>' % { "Rid": Rid, "id": id } \u000a    acc.val = f1457(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'r'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1455(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1455(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1455(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1455(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'g'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1455(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1455(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1455(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1455(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'x'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1455(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1455(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '|'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '('\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 't'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1455(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1455(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 's'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1455(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1455(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 't'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1453(n0,n1): return n1.val \u000a    acc.val = f1453(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1455(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1455(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = ')'\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1457(n0,n1,n2,n3): id = util.uniqueIdentifier(); Rid = util.uniqueIdentifier(); return '<span class="%(id)s">(</span><span class="%(Rid)s">n2.val</span><span class="%(id)s">)</span><script>$(".%(id)s").hover(function() {$(".%(id)s").css("background", "lightgreen");},function() {$(".%(id)s").css("background", "");});</script>' % { "Rid": Rid, "id": id } \u000a    acc.val = f1457(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1454(n0,n1,n2): subStrId = util.uniqueIdentifier(); starId = util.uniqueIdentifier(); return '<span class="%(Rid)s">%(Rval)s</span><span class="%(id)s">*</span><script>$(".%(id)s").hover(function() {$(".%(Rid)s").css("background", "cyan");},function() {$(".%(Rid)s").css("background", "");});</script>' % { "Rid": subStrId, "id": starId, "Rval": n1.val } \u000a    acc.val = f1454(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1454(n0,n1,n2): subStrId = util.uniqueIdentifier(); starId = util.uniqueIdentifier(); return '<span class="%(Rid)s">%(Rval)s</span><span class="%(id)s">*</span><script>$(".%(id)s").hover(function() {$(".%(Rid)s").css("background", "cyan");},function() {$(".%(Rid)s").css("background", "");});</script>' % { "Rid": subStrId, "id": starId, "Rval": n1.val } \u000a    acc.val = f1454(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1456(n0,n1,n2,n3): sideId = util.uniqueIdentifier(); barId = util.uniqueIdentifier(); return '<span class="%(sideId)s">n1.val</span><span class="%(id)s">|</span><span class="%(sideId)s">n3.val</span><script>$(".%(id)s").hover(function() {$(".%(sideId)s").css("background", "yellow");},function() {$(".%(sideId)s").css("background", "");});</script>' % { "sideId": sideId, "id": barId } \u000a    acc.val = f1456(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = ')'\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1457(n0,n1,n2,n3): id = util.uniqueIdentifier(); Rid = util.uniqueIdentifier(); return '<span class="%(id)s">(</span><span class="%(Rid)s">n2.val</span><span class="%(id)s">)</span><script>$(".%(id)s").hover(function() {$(".%(id)s").css("background", "lightgreen");},function() {$(".%(id)s").css("background", "");});</script>' % { "Rid": Rid, "id": id } \u000a    acc.val = f1457(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1454(n0,n1,n2): subStrId = util.uniqueIdentifier(); starId = util.uniqueIdentifier(); return '<span class="%(Rid)s">%(Rval)s</span><span class="%(id)s">*</span><script>$(".%(id)s").hover(function() {$(".%(Rid)s").css("background", "cyan");},function() {$(".%(Rid)s").css("background", "");});</script>' % { "Rid": subStrId, "id": starId, "Rval": n1.val } \u000a    acc.val = f1454(acc, *children[0:2])\u000a    return acc.val\u000aresult = sdt()\u000a
p12
ssS'0c40be7dff984aec975c57fa27b0254a91b01335'
p13
(dp14
Voutput
p15
VNo disambiguation information for input segment: 'h e l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000a
p16
sVvalue
p17
Vimport util\u000a\u000aclass ValueNode:\u000a    def __init__(self):\u000a        self.val = None\u000adef sdt():\u000a    acc = ValueNode()\u000a    stack = []\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '('\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '('\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'h'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1460(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1460(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'l'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1460(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1460(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'l'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1460(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1460(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'o'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1460(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1460(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '|'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'w'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'o'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1460(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1460(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'r'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1460(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1460(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'l'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1460(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1460(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'd'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1459(n0,n1,n2): subStrId = util.uniqueIdentifier(); starId = util.uniqueIdentifier(); return '<span class="%(Rid)s">%(Rval)s</span><span class="%(id)s">*</span><script>$(".%(id)s").hover(function() {$(".%(Rid)s").css("background", "cyan");},function() {$(".%(Rid)s").css("background", "");});</script>' % { "Rid": subStrId, "id": starId, "Rval": n1.val } \u000a    acc.val = f1459(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1460(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1460(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1461(n0,n1,n2,n3): sideId = util.uniqueIdentifier(); barId = util.uniqueIdentifier(); return '<span class="%(sideId)s">%(LHS)s</span><span class="%(id)s">|</span><span class="%(sideId)s">%(RHS)s</span><script>$(".%(id)s").hover(function() {$(".%(sideId)s").css("background", "yellow");},function() {$(".%(sideId)s").css("background", "");});</script>' % { "sideId": sideId, "id": barId, "LHS": n1.val, "RHS": n3.val } \u000a    acc.val = f1461(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = ')'\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1462(n0,n1,n2,n3): id = util.uniqueIdentifier(); Rid = util.uniqueIdentifier(); return '<span class="%(id)s">(</span><span class="%(Rid)s">%(Rval)s</span><span class="%(id)s">)</span><script>$(".%(id)s").hover(function() {$(".%(id)s").css("background", "lightgreen");},function() {$(".%(id)s").css("background", "");});</script>' % { "Rid": Rid, "id": id, "Rval": n2.val } \u000a    acc.val = f1462(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'r'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1460(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1460(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1460(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1460(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'g'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1460(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1460(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1460(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1460(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'x'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1460(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1460(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '|'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '('\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 't'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1460(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1460(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 's'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1460(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1460(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 't'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1458(n0,n1): return n1.val \u000a    acc.val = f1458(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1460(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1460(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = ')'\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1462(n0,n1,n2,n3): id = util.uniqueIdentifier(); Rid = util.uniqueIdentifier(); return '<span class="%(id)s">(</span><span class="%(Rid)s">%(Rval)s</span><span class="%(id)s">)</span><script>$(".%(id)s").hover(function() {$(".%(id)s").css("background", "lightgreen");},function() {$(".%(id)s").css("background", "");});</script>' % { "Rid": Rid, "id": id, "Rval": n2.val } \u000a    acc.val = f1462(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1459(n0,n1,n2): subStrId = util.uniqueIdentifier(); starId = util.uniqueIdentifier(); return '<span class="%(Rid)s">%(Rval)s</span><span class="%(id)s">*</span><script>$(".%(id)s").hover(function() {$(".%(Rid)s").css("background", "cyan");},function() {$(".%(Rid)s").css("background", "");});</script>' % { "Rid": subStrId, "id": starId, "Rval": n1.val } \u000a    acc.val = f1459(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1459(n0,n1,n2): subStrId = util.uniqueIdentifier(); starId = util.uniqueIdentifier(); return '<span class="%(Rid)s">%(Rval)s</span><span class="%(id)s">*</span><script>$(".%(id)s").hover(function() {$(".%(Rid)s").css("background", "cyan");},function() {$(".%(Rid)s").css("background", "");});</script>' % { "Rid": subStrId, "id": starId, "Rval": n1.val } \u000a    acc.val = f1459(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1461(n0,n1,n2,n3): sideId = util.uniqueIdentifier(); barId = util.uniqueIdentifier(); return '<span class="%(sideId)s">%(LHS)s</span><span class="%(id)s">|</span><span class="%(sideId)s">%(RHS)s</span><script>$(".%(id)s").hover(function() {$(".%(sideId)s").css("background", "yellow");},function() {$(".%(sideId)s").css("background", "");});</script>' % { "sideId": sideId, "id": barId, "LHS": n1.val, "RHS": n3.val } \u000a    acc.val = f1461(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = ')'\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1462(n0,n1,n2,n3): id = util.uniqueIdentifier(); Rid = util.uniqueIdentifier(); return '<span class="%(id)s">(</span><span class="%(Rid)s">%(Rval)s</span><span class="%(id)s">)</span><script>$(".%(id)s").hover(function() {$(".%(id)s").css("background", "lightgreen");},function() {$(".%(id)s").css("background", "");});</script>' % { "Rid": Rid, "id": id, "Rval": n2.val } \u000a    acc.val = f1462(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1459(n0,n1,n2): subStrId = util.uniqueIdentifier(); starId = util.uniqueIdentifier(); return '<span class="%(Rid)s">%(Rval)s</span><span class="%(id)s">*</span><script>$(".%(id)s").hover(function() {$(".%(Rid)s").css("background", "cyan");},function() {$(".%(Rid)s").css("background", "");});</script>' % { "Rid": subStrId, "id": starId, "Rval": n1.val } \u000a    acc.val = f1459(acc, *children[0:2])\u000a    return acc.val\u000aresult = sdt()\u000a
p18
ssS'23065d92b27403ec0b5751d122a0b56cfd3abce7'
p19
(dp20
Voutput
p21
VNo disambiguation information for input segment: 'h e l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000a
p22
sVvalue
p23
Vimport util\u000a\u000aclass ValueNode:\u000a    def __init__(self):\u000a        self.val = None\u000adef sdt():\u000a    acc = ValueNode()\u000a    stack = []\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '('\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '('\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'h'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1465(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1465(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'l'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1465(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1465(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'l'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1465(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1465(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'o'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1465(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1465(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '|'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'w'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'o'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1465(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1465(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'r'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1465(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1465(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'l'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1465(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1465(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'd'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1464(n0,n1,n2): subStrId = util.uniqueIdentifier(); starId = util.uniqueIdentifier(); return '<span class="%(Rid)s">%(Rval)s</span><span class="%(id)s">*</span><script>$(".%(id)s").hover(function() {$(".%(Rid)s").css("background", "cyan");},function() {$(".%(Rid)s").css("background", "");});</script>' % { "Rid": subStrId, "id": starId, "Rval": n1.val } \u000a    acc.val = f1464(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1465(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1465(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1466(n0,n1,n2,n3): sideId = util.uniqueIdentifier(); barId = util.uniqueIdentifier(); return '<span class="%(sideId)s">%(LHS)s</span><span class="%(id)s">|</span><span class="%(sideId)s">%(RHS)s</span><script>$(".%(id)s").hover(function() {$(".%(sideId)s").css("background", "yellow");},function() {$(".%(sideId)s").css("background", "");});</script>' % { "sideId": sideId, "id": barId, "LHS": n1.val, "RHS": n3.val } \u000a    acc.val = f1466(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = ')'\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1467(n0,n1,n2,n3): id = util.uniqueIdentifier(); Rid = util.uniqueIdentifier(); return '<span class="%(id)s">(</span><span class="%(Rid)s">%(Rval)s</span><span class="%(id)s">)</span><script>$(".%(id)s").hover(function() {$(".%(id)s").css("background", "lightgreen");},function() {$(".%(id)s").css("background", "");});</script>' % { "Rid": Rid, "id": id, "Rval": n2.val } \u000a    acc.val = f1467(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'r'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1465(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1465(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1465(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1465(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'g'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1465(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1465(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1465(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1465(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'x'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1465(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1465(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '|'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '('\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 't'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1465(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1465(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 's'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1465(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1465(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 't'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1463(n0,n1): return n1.val \u000a    acc.val = f1463(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1465(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1465(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = ')'\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1467(n0,n1,n2,n3): id = util.uniqueIdentifier(); Rid = util.uniqueIdentifier(); return '<span class="%(id)s">(</span><span class="%(Rid)s">%(Rval)s</span><span class="%(id)s">)</span><script>$(".%(id)s").hover(function() {$(".%(id)s").css("background", "lightgreen");},function() {$(".%(id)s").css("background", "");});</script>' % { "Rid": Rid, "id": id, "Rval": n2.val } \u000a    acc.val = f1467(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1464(n0,n1,n2): subStrId = util.uniqueIdentifier(); starId = util.uniqueIdentifier(); return '<span class="%(Rid)s">%(Rval)s</span><span class="%(id)s">*</span><script>$(".%(id)s").hover(function() {$(".%(Rid)s").css("background", "cyan");},function() {$(".%(Rid)s").css("background", "");});</script>' % { "Rid": subStrId, "id": starId, "Rval": n1.val } \u000a    acc.val = f1464(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1464(n0,n1,n2): subStrId = util.uniqueIdentifier(); starId = util.uniqueIdentifier(); return '<span class="%(Rid)s">%(Rval)s</span><span class="%(id)s">*</span><script>$(".%(id)s").hover(function() {$(".%(Rid)s").css("background", "cyan");},function() {$(".%(Rid)s").css("background", "");});</script>' % { "Rid": subStrId, "id": starId, "Rval": n1.val } \u000a    acc.val = f1464(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1466(n0,n1,n2,n3): sideId = util.uniqueIdentifier(); barId = util.uniqueIdentifier(); return '<span class="%(sideId)s">%(LHS)s</span><span class="%(id)s">|</span><span class="%(sideId)s">%(RHS)s</span><script>$(".%(id)s").hover(function() {$(".%(sideId)s").css("background", "yellow");},function() {$(".%(sideId)s").css("background", "");});</script>' % { "sideId": sideId, "id": barId, "LHS": n1.val, "RHS": n3.val } \u000a    acc.val = f1466(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = ')'\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1467(n0,n1,n2,n3): id = util.uniqueIdentifier(); Rid = util.uniqueIdentifier(); return '<span class="%(id)s">(</span><span class="%(Rid)s">%(Rval)s</span><span class="%(id)s">)</span><script>$(".%(id)s").hover(function() {$(".%(id)s").css("background", "lightgreen");},function() {$(".%(id)s").css("background", "");});</script>' % { "Rid": Rid, "id": id, "Rval": n2.val } \u000a    acc.val = f1467(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1464(n0,n1,n2): subStrId = util.uniqueIdentifier(); starId = util.uniqueIdentifier(); return '<span class="%(Rid)s">%(Rval)s</span><span class="%(id)s">*</span><script>$(".%(id)s").hover(function() {$(".%(Rid)s").css("background", "cyan");},function() {$(".%(Rid)s").css("background", "");});</script>' % { "Rid": subStrId, "id": starId, "Rval": n1.val } \u000a    acc.val = f1464(acc, *children[0:2])\u000a    return acc.val\u000aresult = sdt()\u000a
p24
ssS'45adf81c4f67265ea2f895be615e23cc605c5a71'
p25
(dp26
Voutput
p27
VNo disambiguation information for input segment: 'h e l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000a
p28
sVvalue
p29
Vimport time\u000a\u000aclass ValueNode:\u000a    def __init__(self):\u000a        self.val = None\u000adef sdt():\u000a    acc = ValueNode()\u000a    stack = []\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '('\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '('\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'h'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1404(n0,n1,n2):return n1.val+n2.val \u000a    acc.val = f1404(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'l'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1404(n0,n1,n2):return n1.val+n2.val \u000a    acc.val = f1404(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'l'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1404(n0,n1,n2):return n1.val+n2.val \u000a    acc.val = f1404(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'o'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1404(n0,n1,n2):return n1.val+n2.val \u000a    acc.val = f1404(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '|'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'w'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'o'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1404(n0,n1,n2):return n1.val+n2.val \u000a    acc.val = f1404(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'r'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1404(n0,n1,n2):return n1.val+n2.val \u000a    acc.val = f1404(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'l'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1404(n0,n1,n2):return n1.val+n2.val \u000a    acc.val = f1404(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'd'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1405(n0,n1,n2):return ('<span class="%(Rid)s" style>%(R)s</span>' +\u005c\u000a                  '<span class="%(star)s" style>*</span>' +\u005c\u000a                  '<script> $(".%(star)s").hover(' +\u005c\u000a                    'function(){$(".%(Rid)s").css("background", "cyan");},' +\u005c\u000a                    'function(){$(".%(Rid)s").css("background", "");});' +\u005c\u000a                  '</script>') \u005c\u000a                  % {'Rid':hash((n1.val, time.time())),\u005c\u000a                     'star':hash((n1.val+n2.val, time.time())),\u005c\u000a                     'R':n1.val} \u000a    acc.val = f1405(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1404(n0,n1,n2):return n1.val+n2.val \u000a    acc.val = f1404(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1406(n0,n1,n2,n3):return ('<span class="%(Rs)s" style>%(R1)s</span>' +\u005c\u000a                  '<span class="%(or)s" style>|</span>' +\u005c\u000a                  '<span class="%(Rs)s" style>%(R2)s</span>' +\u005c\u000a                  '<script> $(".%(or)s").hover(' +\u005c\u000a                    'function(){$(".%(Rs)s").css("background", "yellow");},' +\u005c\u000a                    'function(){$(".%(Rs)s").css("background", "");});' +\u005c\u000a                  '</script>') \u005c\u000a                  % {'Rs':hash((n1.val+'|'+'|'+n3.val, time.time())),\u005c\u000a                     'R1':n1.val,\u005c\u000a                     'R2':n3.val,\u005c\u000a                     'or':hash((n1.val+'|'+n3.val, time.time()))} \u000a    acc.val = f1406(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = ')'\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1407(n0,n1,n2,n3):return ('<span class=%(paren)s style>(</span>' +\u005c\u000a                  '<span class="%(Rid)s" style>%(R)s</span>' +\u005c\u000a                  '<span class=%(paren)s style>)</span>' +\u005c\u000a                  '<script> $(".%(paren)s").hover(' +\u005c\u000a                    'function(){$(".%(paren)s").css("background", "lightgreen");},' +\u005c\u000a                    'function(){$(".%(paren)s").css("background", "");});' +\u005c\u000a                  '</script>') \u005c\u000a                  % {'paren':hash(('('+n2.val+')', time.time())),\u005c\u000a                     'Rid':hash(('\u005c\u005c('+n2.val+')', time.time())),\u005c\u000a                     'R':n2.val} \u000a    acc.val = f1407(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'r'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1404(n0,n1,n2):return n1.val+n2.val \u000a    acc.val = f1404(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1404(n0,n1,n2):return n1.val+n2.val \u000a    acc.val = f1404(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'g'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1404(n0,n1,n2):return n1.val+n2.val \u000a    acc.val = f1404(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1404(n0,n1,n2):return n1.val+n2.val \u000a    acc.val = f1404(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'x'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1404(n0,n1,n2):return n1.val+n2.val \u000a    acc.val = f1404(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '|'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '('\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 't'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1404(n0,n1,n2):return n1.val+n2.val \u000a    acc.val = f1404(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 's'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1404(n0,n1,n2):return n1.val+n2.val \u000a    acc.val = f1404(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 't'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1403(n0,n1):return n1.val \u000a    acc.val = f1403(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1404(n0,n1,n2):return n1.val+n2.val \u000a    acc.val = f1404(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = ')'\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1407(n0,n1,n2,n3):return ('<span class=%(paren)s style>(</span>' +\u005c\u000a                  '<span class="%(Rid)s" style>%(R)s</span>' +\u005c\u000a                  '<span class=%(paren)s style>)</span>' +\u005c\u000a                  '<script> $(".%(paren)s").hover(' +\u005c\u000a                    'function(){$(".%(paren)s").css("background", "lightgreen");},' +\u005c\u000a                    'function(){$(".%(paren)s").css("background", "");});' +\u005c\u000a                  '</script>') \u005c\u000a                  % {'paren':hash(('('+n2.val+')', time.time())),\u005c\u000a                     'Rid':hash(('\u005c\u005c('+n2.val+')', time.time())),\u005c\u000a                     'R':n2.val} \u000a    acc.val = f1407(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1405(n0,n1,n2):return ('<span class="%(Rid)s" style>%(R)s</span>' +\u005c\u000a                  '<span class="%(star)s" style>*</span>' +\u005c\u000a                  '<script> $(".%(star)s").hover(' +\u005c\u000a                    'function(){$(".%(Rid)s").css("background", "cyan");},' +\u005c\u000a                    'function(){$(".%(Rid)s").css("background", "");});' +\u005c\u000a                  '</script>') \u005c\u000a                  % {'Rid':hash((n1.val, time.time())),\u005c\u000a                     'star':hash((n1.val+n2.val, time.time())),\u005c\u000a                     'R':n1.val} \u000a    acc.val = f1405(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1405(n0,n1,n2):return ('<span class="%(Rid)s" style>%(R)s</span>' +\u005c\u000a                  '<span class="%(star)s" style>*</span>' +\u005c\u000a                  '<script> $(".%(star)s").hover(' +\u005c\u000a                    'function(){$(".%(Rid)s").css("background", "cyan");},' +\u005c\u000a                    'function(){$(".%(Rid)s").css("background", "");});' +\u005c\u000a                  '</script>') \u005c\u000a                  % {'Rid':hash((n1.val, time.time())),\u005c\u000a                     'star':hash((n1.val+n2.val, time.time())),\u005c\u000a                     'R':n1.val} \u000a    acc.val = f1405(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1406(n0,n1,n2,n3):return ('<span class="%(Rs)s" style>%(R1)s</span>' +\u005c\u000a                  '<span class="%(or)s" style>|</span>' +\u005c\u000a                  '<span class="%(Rs)s" style>%(R2)s</span>' +\u005c\u000a                  '<script> $(".%(or)s").hover(' +\u005c\u000a                    'function(){$(".%(Rs)s").css("background", "yellow");},' +\u005c\u000a                    'function(){$(".%(Rs)s").css("background", "");});' +\u005c\u000a                  '</script>') \u005c\u000a                  % {'Rs':hash((n1.val+'|'+'|'+n3.val, time.time())),\u005c\u000a                     'R1':n1.val,\u005c\u000a                     'R2':n3.val,\u005c\u000a                     'or':hash((n1.val+'|'+n3.val, time.time()))} \u000a    acc.val = f1406(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = ')'\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1407(n0,n1,n2,n3):return ('<span class=%(paren)s style>(</span>' +\u005c\u000a                  '<span class="%(Rid)s" style>%(R)s</span>' +\u005c\u000a                  '<span class=%(paren)s style>)</span>' +\u005c\u000a                  '<script> $(".%(paren)s").hover(' +\u005c\u000a                    'function(){$(".%(paren)s").css("background", "lightgreen");},' +\u005c\u000a                    'function(){$(".%(paren)s").css("background", "");});' +\u005c\u000a                  '</script>') \u005c\u000a                  % {'paren':hash(('('+n2.val+')', time.time())),\u005c\u000a                     'Rid':hash(('\u005c\u005c('+n2.val+')', time.time())),\u005c\u000a                     'R':n2.val} \u000a    acc.val = f1407(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1405(n0,n1,n2):return ('<span class="%(Rid)s" style>%(R)s</span>' +\u005c\u000a                  '<span class="%(star)s" style>*</span>' +\u005c\u000a                  '<script> $(".%(star)s").hover(' +\u005c\u000a                    'function(){$(".%(Rid)s").css("background", "cyan");},' +\u005c\u000a                    'function(){$(".%(Rid)s").css("background", "");});' +\u005c\u000a                  '</script>') \u005c\u000a                  % {'Rid':hash((n1.val, time.time())),\u005c\u000a                     'star':hash((n1.val+n2.val, time.time())),\u005c\u000a                     'R':n1.val} \u000a    acc.val = f1405(acc, *children[0:2])\u000a    return acc.val\u000aresult = sdt()\u000a
p30
ssS'e34b3e05e3c5b044a53a1111c800bbcd5f463f3d'
p31
(dp32
Voutput
p33
VNo disambiguation information for input segment: 'h e l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'h e l l o | w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'w o r l d *'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: '( h e l l o | w o r l d * ) r e g e x'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 'e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000aNo disambiguation information for input segment: 't e s t'\u000aConflicting productions and their OpPrec, Assoc, Dprec: \u000aR -> R R	:  None None 2\u000aR -> R R	:  None None 2\u000a\u000a
p34
sVvalue
p35
Vimport util\u000a\u000aclass ValueNode:\u000a    def __init__(self):\u000a        self.val = None\u000adef sdt():\u000a    acc = ValueNode()\u000a    stack = []\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '('\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '('\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'h'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1450(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1450(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'l'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1450(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1450(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'l'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1450(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1450(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'o'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1450(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1450(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '|'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'w'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'o'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1450(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1450(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'r'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1450(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1450(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'l'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1450(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1450(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'd'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1449(n0,n1,n2): subStrId = util.uniqueIdentifier(); starId = util.uniqueIdentifier(); return '<span class="%(Rid)s">n1.val</span><span class="%(id)s">*</span><script>$(".%(id)s").hover(function() {$(".%(Rid)s").css("background", "cyan");},function() {$(".%(Rid)s").css("background", "");});</script>' % { "Rid": subStrId, "id": starId } \u000a    acc.val = f1449(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1450(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1450(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1451(n0,n1,n2,n3): sideId = util.uniqueIdentifier(); barId = util.uniqueIdentifier(); return '<span class="%(sideId)s">n1.val</span><span class="%(id)s">|</span><span class="%(sideId)s">n3.val</span><script>$(".%(id)s").hover(function() {$(".%(sideId)s").css("background", "yellow");},function() {$(".%(sideId)s").css("background", "");});</script>' % { "sideId": sideId, "id": barId } \u000a    acc.val = f1451(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = ')'\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1452(n0,n1,n2,n3): id = util.uniqueIdentifier(); Rid = util.uniqueIdentifier(); return '<span class="%(id)s">(</span><span class="%(Rid)s">n2.val</span><span class="%(id)s">)</span><script>$(".%(id)s").hover(function() {$(".%(id)s").css("background", "lightgreen");},function() {$(".%(id)s").css("background", "");});</script>' % { "Rid": Rid, "id": id } \u000a    acc.val = f1452(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'r'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1450(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1450(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1450(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1450(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'g'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1450(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1450(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1450(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1450(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'x'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1450(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1450(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '|'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '('\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 't'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 'e'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1450(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1450(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 's'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1450(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1450(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = 't'\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    acc.val = children[0].val\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    def f1448(n0,n1): return n1.val \u000a    acc.val = f1448(acc, *children[0:1])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1450(n0,n1,n2): return n1.val + n2.val \u000a    acc.val = f1450(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = ')'\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1452(n0,n1,n2,n3): id = util.uniqueIdentifier(); Rid = util.uniqueIdentifier(); return '<span class="%(id)s">(</span><span class="%(Rid)s">n2.val</span><span class="%(id)s">)</span><script>$(".%(id)s").hover(function() {$(".%(id)s").css("background", "lightgreen");},function() {$(".%(id)s").css("background", "");});</script>' % { "Rid": Rid, "id": id } \u000a    acc.val = f1452(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1449(n0,n1,n2): subStrId = util.uniqueIdentifier(); starId = util.uniqueIdentifier(); return '<span class="%(Rid)s">n1.val</span><span class="%(id)s">*</span><script>$(".%(id)s").hover(function() {$(".%(Rid)s").css("background", "cyan");},function() {$(".%(Rid)s").css("background", "");});</script>' % { "Rid": subStrId, "id": starId } \u000a    acc.val = f1449(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1449(n0,n1,n2): subStrId = util.uniqueIdentifier(); starId = util.uniqueIdentifier(); return '<span class="%(Rid)s">n1.val</span><span class="%(id)s">*</span><script>$(".%(id)s").hover(function() {$(".%(Rid)s").css("background", "cyan");},function() {$(".%(Rid)s").css("background", "");});</script>' % { "Rid": subStrId, "id": starId } \u000a    acc.val = f1449(acc, *children[0:2])\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1451(n0,n1,n2,n3): sideId = util.uniqueIdentifier(); barId = util.uniqueIdentifier(); return '<span class="%(sideId)s">n1.val</span><span class="%(id)s">|</span><span class="%(sideId)s">n3.val</span><script>$(".%(id)s").hover(function() {$(".%(sideId)s").css("background", "yellow");},function() {$(".%(sideId)s").css("background", "");});</script>' % { "sideId": sideId, "id": barId } \u000a    acc.val = f1451(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = ')'\u000a    children = stack.pop()\u000a    children[2].val = acc.val\u000a    def f1452(n0,n1,n2,n3): id = util.uniqueIdentifier(); Rid = util.uniqueIdentifier(); return '<span class="%(id)s">(</span><span class="%(Rid)s">n2.val</span><span class="%(id)s">)</span><script>$(".%(id)s").hover(function() {$(".%(id)s").css("background", "lightgreen");},function() {$(".%(id)s").css("background", "");});</script>' % { "Rid": Rid, "id": id } \u000a    acc.val = f1452(acc, *children[0:3])\u000a    children = stack.pop()\u000a    children[0].val = acc.val\u000a    stack.append(children)\u000a    children = [ValueNode() for i in xrange(0,20)]\u000a    acc.val = '*'\u000a    children = stack.pop()\u000a    children[1].val = acc.val\u000a    def f1449(n0,n1,n2): subStrId = util.uniqueIdentifier(); starId = util.uniqueIdentifier(); return '<span class="%(Rid)s">n1.val</span><span class="%(id)s">*</span><script>$(".%(id)s").hover(function() {$(".%(Rid)s").css("background", "cyan");},function() {$(".%(Rid)s").css("background", "");});</script>' % { "Rid": subStrId, "id": starId } \u000a    acc.val = f1449(acc, *children[0:2])\u000a    return acc.val\u000aresult = sdt()\u000a
p36
ss.